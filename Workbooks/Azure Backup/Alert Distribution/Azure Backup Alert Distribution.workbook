{
    "version": "Notebook/1.0",
    "items": [
        {
            "type": 1,
            "content": {
                "json": "<div style=\"text-align:left;float:left;\"><span data-ttu-id=\"853ef-101\"><span style=\"font-size:16px;font-weight:600\">ÈÄâÊã© Log Analytics Â∑•‰ΩúÂå∫ </span> </span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-101\"><span style=\"font-size:16px;font-weight:600\">Select Log Analytics Workspace </span> </span></span><br> <span data-ttu-id=\"853ef-102\"><span style=\"font-size:12px;\"><a href=\"#\">Â¶Ç‰ΩïÈÖçÁΩÆÂ§á‰ªΩÊä•Ë°®ÁöÑ‰øùÁÆ°Â∫ìËØäÊñ≠ËÆæÁΩÆ </a> </span> </span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-102\"><span style=\"font-size:12px;\"> <a href=\"#\"> How to configure vault diagnostic settings for backup reports </a> </span> </span></span></div> <div style=\"text-align:right; float:right\"> <span data-ttu-id=\"853ef-103\"><span style=\"font-size:12px;\"><a href=\"#\">Power BI Êä•Ë°®ÂèëÁîü‰∫Ü‰ªÄ‰πàÔºü</a> </span> </span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-103\"><span style=\"font-size:12px;\"> <a href=\"#\"> What happened to the Power BI reports? </a> </span> </span></span></div>"
            },
            "name": "text - 13"
        },
        {
            "type": 9,
            "content": {
                "version": "KqlParameterItem/1.0",
                "query": "",
                "crossComponentResources": [
                    "{Subscriptions}"
                ],
                "parameters": [
                    {
                        "id": "6c14aa18-29d3-4b94-81a9-4499c98aa9bb",
                        "version": "KqlParameterItem/1.0",
                        "name": "Subscriptions",
                        "type": 6,
                        "description": "<span data-ttu-id=\"853ef-104\">Âú®ÂÖ∂‰∏≠ÂàõÂª∫‰∫Ü LA Â∑•‰ΩúÂå∫ÁöÑËÆ¢ÈòÖ</span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-104\">The subscriptions in which your LA Workspaces were created</span></span>",
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "summarize by subscriptionId\r\n| project value = strcat(\"/subscriptions/\", subscriptionId)\r\n",
                        "crossComponentResources": [
                            "value::all"
                        ],
                        "value": [
                            "value::all"
                        ],
                        "typeSettings": {
                            "additionalResourceOptions": [
                                "value::all"
                            ]
                        },
                        "timeContext": {
                            "durationMs": 604800000
                        },
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources"
                    },
                    {
                        "id": "f430b9f7-0bcb-49de-ad5d-67547345d26e",
                        "version": "KqlParameterItem/1.0",
                        "name": "Workspaces",
                        "type": 5,
                        "description": "<span data-ttu-id=\"853ef-105\">Âú® Azure Â§á‰ªΩËØäÊñ≠ËÆæÁΩÆ‰∏≠ÈÖçÁΩÆÁöÑ LA Â∑•‰ΩúÂå∫</span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-105\">The LA Workspaces which you configured in Azure Backup Diagnostic settings</span></span>",
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "where type =~ 'microsoft.operationalinsights/workspaces'\r\n| project id",
                        "crossComponentResources": [
                            "{Subscriptions}"
                        ],
                        "value": [],
                        "typeSettings": {
                            "additionalResourceOptions": [
                                "value::all"
                            ]
                        },
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources"
                    }
                ],
                "style": "above",
                "queryType": 1,
                "resourceType": "microsoft.resourcegraph/resources"
            },
            "customWidth": "50",
            "name": "parameters - 1"
        },
        {
            "type": 1,
            "content": {
                "json": "____________________"
            },
            "name": "text - 13"
        },
        {
            "type": 1,
            "content": {
                "json": "<div style=\"text-align:left;float:left;\"><span data-ttu-id=\"853ef-106\"><span style=\"font-size:16px;font-weight:600\">Êä•Ë°®Á≠õÈÄâÂô® </span> </span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-106\"><span style=\"font-size:16px;font-weight:600\">Report Filters </span> </span></span></div> <div style=\"text-align:right; float:right\"> <span data-ttu-id=\"853ef-107\"><span style=\"font-size:12px;\"><a href=\"#\">Â¶Ç‰Ωï‰ΩøÁî®Â§á‰ªΩÊä•Ë°®Ôºü</a></span> </span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-107\"><span style=\"font-size:12px;\"> <a href=\"#\"> How to use backup reports? </a> </span> </span></span></div>"
            },
            "name": "text - 14"
        },
        {
            "type": 1,
            "content": {
                "json": "<p> <span data-ttu-id=\"853ef-108\">üí° <span style=\"font-size:12px; font-style:italic\"> Á≠õÈÄâÂô®Âú®ÊØè‰∏™È°µÈù¢‰ªéÂ∑¶ÂêëÂè≥„ÄÅ‰ªé‰∏äÂêë‰∏ãÂ∫îÁî®„ÄÇ</span> </span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-108\">üí° <span style=\"font-size:12px; font-style:italic\"> Filters are applied left to right and top to bottom on each page. </span> </span></span></p>"
            },
            "name": "text - 15"
        },
        {
            "type": 9,
            "content": {
                "version": "KqlParameterItem/1.0",
                "query": "",
                "crossComponentResources": [
                    "{Workspaces}"
                ],
                "parameters": [
                    {
                        "id": "acc7ddc8-57c6-41f7-a3e8-dd19f7905691",
                        "version": "KqlParameterItem/1.0",
                        "name": "TimeRange",
                        "type": 4,
                        "description": "<span data-ttu-id=\"853ef-109\">Êó∂Èó¥ËåÉÂõ¥</span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-109\">Time Range</span></span>",
                        "value": {
                            "durationMs": 604800000
                        },
                        "typeSettings": {
                            "selectableValues": [
                                {
                                    "durationMs": 259200000
                                },
                                {
                                    "durationMs": 604800000
                                },
                                {
                                    "durationMs": 1209600000
                                },
                                {
                                    "durationMs": 2419200000
                                },
                                {
                                    "durationMs": 2592000000
                                },
                                {
                                    "durationMs": 5184000000
                                },
                                {
                                    "durationMs": 7776000000
                                }
                            ],
                            "allowCustom": true
                        },
                        "timeContextFromParameter": "TimeRange"
                    },
                    {
                        "id": "9805ce08-acc6-4eff-b9c1-91f834259618",
                        "version": "KqlParameterItem/1.0",
                        "name": "BMSTypeWithBackupItemType",
                        "label": "Backup Item Type",
                        "type": 2,
                        "description": "<span data-ttu-id=\"853ef-110\">BackupItem ÁöÑÁ±ªÂûã</span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-110\">Type of BackupItem</span></span>",
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "// Fetch data from AzureDiagnostics\r\nlet RecordsUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n| extend  BackupManagementType = BackupManagementType_s, BackupItemType = BackupItemType_s \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet RecordsUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n| where OperationName == \"BackupItem\"\r\n};\r\nCombinedTable | union isfuzzy = true \r\n(RecordsUnderAzureDiagnostics()),\r\n(RecordsUnderResourceSpecific())\r\n| distinct BackupManagementType, BackupItemType\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType) \r\n| distinct BMSTypeWithBackupItemType",
                        "crossComponentResources": [
                            "{Workspaces}"
                        ],
                        "value": [
                            "value::all"
                        ],
                        "typeSettings": {
                            "additionalResourceOptions": [
                                "value::all"
                            ]
                        },
                        "timeContext": {
                            "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                    },
                    {
                        "id": "2a83acc5-2123-476f-8a4c-da2fddf231a1",
                        "version": "KqlParameterItem/1.0",
                        "name": "Location",
                        "label": "Vault Location",
                        "type": 2,
                        "description": "<span data-ttu-id=\"853ef-111\">‰øùÁÆ°Â∫ìÁöÑÂàõÂª∫‰ΩçÁΩÆ</span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-111\">Location in which vault was created</span></span>",
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "// Parameter Used -  BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemsUnderAzureDiagnostics = ( ) \r\n{\r\nlet VaultTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| extend VaultName = VaultName_s, AzureDataCenter = AzureDataCenter_s\r\n| project ResourceId, VaultName, AzureDataCenter;\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType_s, \"/\", BackupItemType_s), BackupItemUniqueId = BackupItemUniqueId_s\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\nBackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemsUnderResourceSpecific = ( ) \r\n{\r\nlet VaultTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" \r\n| project ResourceId, VaultName, AzureDataCenter;\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\nBackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemsUnderAzureDiagnostics()),\r\n(BackupItemsUnderResourceSpecific())\r\n| distinct AzureDataCenter};\r\nLatestBackupItemTable",
                        "crossComponentResources": [
                            "{Workspaces}"
                        ],
                        "value": [
                            "value::all"
                        ],
                        "typeSettings": {
                            "additionalResourceOptions": [
                                "value::all"
                            ]
                        },
                        "timeContext": {
                            "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                    },
                    {
                        "id": "fefd31fa-2774-43ca-8cc3-44d477c969f0",
                        "version": "KqlParameterItem/1.0",
                        "name": "Vault",
                        "label": "Vault Name",
                        "type": 2,
                        "description": "<span data-ttu-id=\"853ef-112\">‰øùÁÆ°Â∫ìÁöÑÂêçÁß∞</span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-112\">Name of the vault</span></span>",
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "// Parameter Used -  BMSTypeWithBackupItemType, Location\r\n// Time variable used\r\nlet Today = startofday(now());\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemsUnderAzureDiagnostics = ( ) \r\n{\r\nlet VaultTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n// Filter by Parameter\r\n| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n| extend VaultName = VaultName_s, AzureDataCenter = AzureDataCenter_s\r\n| project ResourceId, VaultName, AzureDataCenter;\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType_s, \"/\", BackupItemType_s), BackupItemUniqueId = BackupItemUniqueId_s\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\nBackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemsUnderResourceSpecific = ( ) \r\n{\r\nlet VaultTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" \r\n// Filter by Parameter\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| project ResourceId, VaultName, AzureDataCenter;\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\nBackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemsUnderAzureDiagnostics()),\r\n(BackupItemsUnderResourceSpecific())\r\n| distinct VaultName};\r\nLatestBackupItemTable",
                        "crossComponentResources": [
                            "{Workspaces}"
                        ],
                        "value": [
                            "value::all"
                        ],
                        "typeSettings": {
                            "additionalResourceOptions": [
                                "value::all"
                            ]
                        },
                        "timeContext": {
                            "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                    }
                ],
                "style": "above",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "parameters - 7"
        },
        {
            "type": 1,
            "content": {
                "json": " <span data-ttu-id=\"853ef-113\">‚ìò <span style=\"font-size:12px;font-style:italic\"> ÊâÄÊúâÊó•ÊúüÊó∂Èó¥ÈÉΩÂ§Ñ‰∫éÈó®Êà∑Êó∂Âå∫‰∏≠„ÄÇÊä•Ë°®‰∏≠‰∏çÊòæÁ§∫ÂΩìÂâçÊú™Êª°‰∏ÄÂ§©ÁöÑÊï∞ÊçÆ„ÄÇ</span></span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-113\">‚ìò <span style=\"font-size:12px;font-style:italic\"> All datetimes are in portal timezone. Data for the current partial day is not shown in the reports.</span></span></span></div>"
            },
            "name": "text - 16"
        },
        {
            "type": 1,
            "content": {
                "json": "______________________________"
            },
            "name": "text - 13"
        },
        {
            "type": 11,
            "content": {
                "version": "LinkItem/1.0",
                "style": "nav",
                "links": [
                    {
                        "cellValue": "",
                        "linkTarget": "WorkbookTemplate",
                        "linkLabel": "Summary",
                        "style": "secondary",
                        "workbookContext": {
                            "componentIdSource": "workbook",
                            "resourceIdsSource": "workbook",
                            "templateIdSource": "static",
                            "templateId": "Community-Workbooks/Azure Backup/Summary",
                            "typeSource": "default",
                            "gallerySource": "static",
                            "gallery": "Azure Monitor"
                        }
                    },
                    {
                        "cellValue": "",
                        "linkTarget": "WorkbookTemplate",
                        "linkLabel": "Protected Instances",
                        "style": "secondary",
                        "workbookContext": {
                            "componentIdSource": "workbook",
                            "resourceIdsSource": "workbook",
                            "templateIdSource": "static",
                            "templateId": "Community-Workbooks/Azure Backup/Protected Instances",
                            "typeSource": "default",
                            "gallerySource": "static",
                            "gallery": "Azure Monitor"
                        }
                    },
                    {
                        "cellValue": "",
                        "linkTarget": "WorkbookTemplate",
                        "linkLabel": "BackupItems",
                        "style": "secondary",
                        "workbookContext": {
                            "componentIdSource": "workbook",
                            "resourceIdsSource": "workbook",
                            "templateIdSource": "static",
                            "templateId": "Community-Workbooks/Azure Backup/Storage",
                            "typeSource": "default",
                            "gallerySource": "static",
                            "gallery": "Azure Monitor"
                        }
                    },
                    {
                        "linkTarget": "WorkbookTemplate",
                        "linkLabel": "Job Distribution",
                        "style": "secondary",
                        "workbookContext": {
                            "componentIdSource": "workbook",
                            "resourceIdsSource": "workbook",
                            "templateIdSource": "static",
                            "templateId": "Community-Workbooks/Azure Backup/Job Distribution",
                            "typeSource": "default",
                            "gallerySource": "static",
                            "gallery": "Azure Monitor"
                        }
                    },
                    {
                        "linkTarget": "WorkbookTemplate",
                        "linkLabel": "Job Details",
                        "style": "secondary",
                        "workbookContext": {
                            "componentIdSource": "workbook",
                            "resourceIdsSource": "workbook",
                            "templateIdSource": "static",
                            "templateId": "Community-Workbooks/Azure Backup/Job Details",
                            "typeSource": "default",
                            "gallerySource": "static",
                            "gallery": "Azure Monitor"
                        }
                    },
                    {
                        "cellValue": "parameters - 1",
                        "linkTarget": "step",
                        "linkLabel": "Alert Distribution",
                        "style": "primary"
                    },
                    {
                        "linkTarget": "WorkbookTemplate",
                        "linkLabel": "Alert Details",
                        "style": "secondary",
                        "workbookContext": {
                            "componentIdSource": "workbook",
                            "resourceIdsSource": "workbook",
                            "templateIdSource": "static",
                            "templateId": "Community-Workbooks/Azure Backup/Alert Details",
                            "typeSource": "default",
                            "gallerySource": "static",
                            "gallery": "Azure Monitor"
                        }
                    }
                ]
            },
            "name": "links - 8"
        },
        {
            "type": 1,
            "content": {
                "json": "______________________"
            },
            "name": "text - 15",
            "styleSettings": {
                "margin": "0% 0% 0% 0%",
                "padding": "0% 0% 0% 0%"
            }
        },
        {
            "type": 9,
            "content": {
                "version": "KqlParameterItem/1.0",
                "query": "",
                "crossComponentResources": [
                    "{Workspaces}"
                ],
                "parameters": [
                    {
                        "id": "4aa1a909-c67b-4555-9536-c9ed26731d39",
                        "version": "KqlParameterItem/1.0",
                        "name": "AlertType",
                        "label": "Alert Type",
                        "type": 2,
                        "description": "<span data-ttu-id=\"853ef-114\">ÈÄâÊã©Ë≠¶Êä•Á±ªÂûã</span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-114\">Select Alert Type</span></span>",
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "let RecordsUnderAzureDiagnostics = ( ) \r\n{\r\nlet AlertTable = AzureDiagnostics\r\n| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\"\r\n| summarize by AlertType_s;\r\nAlertTable\r\n};\r\n// Fetch data from ResourceSpecific\r\nlet RecordsUnderResourceSpecific = ( ) \r\n{\r\nlet AlertTable = AddonAzureBackupAlerts\r\n| where OperationName == \"Alert\" and SchemaVersion == \"V2\"\r\n| summarize by AlertType;\r\nAlertTable\r\n};\r\nCombinedTable | union isfuzzy = true \r\n(RecordsUnderAzureDiagnostics()),\r\n(RecordsUnderResourceSpecific())\r\n\r\n",
                        "crossComponentResources": [
                            "{Workspaces}"
                        ],
                        "value": [
                            "value::all"
                        ],
                        "typeSettings": {
                            "additionalResourceOptions": [
                                "value::all"
                            ]
                        },
                        "timeContext": {
                            "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                    },
                    {
                        "id": "b0ba5e8b-029d-4708-80af-0b7d0c066359",
                        "version": "KqlParameterItem/1.0",
                        "name": "AlertSeverity",
                        "label": "Alert Severity",
                        "type": 2,
                        "description": "<span data-ttu-id=\"853ef-115\">ÈÄâÊã©Ë≠¶Êä•‰∏•ÈáçÊÄß</span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-115\">Select Alert Severity</span></span>",
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "let RecordsUnderAzureDiagnostics = ( ) \r\n{\r\nlet AlertTable = AzureDiagnostics\r\n| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\"\r\n| summarize by AlertSeverity_s;\r\nAlertTable\r\n};\r\n// Fetch data from ResourceSpecific\r\nlet RecordsUnderResourceSpecific = ( ) \r\n{\r\nlet AlertTable = AddonAzureBackupAlerts\r\n| where OperationName == \"Alert\" and SchemaVersion == \"V2\"\r\n| summarize by AlertSeverity;\r\nAlertTable\r\n};\r\nCombinedTable | union isfuzzy = true \r\n(RecordsUnderAzureDiagnostics()),\r\n(RecordsUnderResourceSpecific())\r\n\r\n",
                        "crossComponentResources": [
                            "{Workspaces}"
                        ],
                        "value": [
                            "value::all"
                        ],
                        "typeSettings": {
                            "additionalResourceOptions": [
                                "value::all"
                            ]
                        },
                        "timeContext": {
                            "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                    }
                ],
                "style": "pills",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "parameters - 13"
        },
        {
            "type": 3,
            "content": {
                "version": "KqlItem/1.0",
                "query": "// Time variable used\r\nlet Today = startofday(now());\r\n\r\n//**********************************************************************************************High-level Functions**********************************************************************************************\r\n\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= {TimeRange:start} and AlertOccurrenceDateTime <= {TimeRange:end};\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n| distinct *\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd\r\n);\r\nlet FinalAlert = ()\r\n{\r\n  AlertTableWithAppliedFilter \r\n  | summarize count() by AlertSeverity;\r\n};\r\nFinalAlert",
                "size": 4,
                "exportToExcelOptions": "visible",
                "title": "Alerts by Severity",
                "color": "green",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                    "{Workspaces}"
                ],
                "visualization": "piechart"
            },
            "customWidth": "50",
            "name": "Severity Destribution"
        },
        {
            "type": 3,
            "content": {
                "version": "KqlItem/1.0",
                "query": "// Time variable used\r\nlet Today = startofday(now());\r\n\r\n//**********************************************************************************************High-level Functions**********************************************************************************************\r\n\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= {TimeRange:start} and AlertOccurrenceDateTime <= {TimeRange:end};\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n\t | where AlertSeverity in ({AlertSeverity})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n| distinct *\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd\r\n);\r\n\r\nlet AlertResolvePercent = AlertTableWithAppliedFilter\r\n| extend resolved=iff((AlertStatus == \"Resolved\") , 1 , 0)\r\n| extend record = 1 // to be used for total row count\r\n| summarize ResolvedCount =sum(resolved), TotalCount=sum(record)\r\n| extend AlertResolvedPercentage = (ResolvedCount*100)/todouble(TotalCount)\r\n| project AlertResolvedPercentage \r\n| extend  Key = pack_array(\"Resolved%\"), Value = pack_array( AlertResolvedPercentage), Row = pack_array(1000)\r\n| project Key, Value, Row\r\n| mvexpand  Key, Value, Row; \r\nlet AlertStatusTable = AlertTableWithAppliedFilter\r\n| summarize dcount(AlertUniqueId) by AlertStatus\r\n| order by AlertStatus asc\r\n| extend row_num = row_number()\r\n| extend  Key = pack_array(AlertStatus), Value = pack_array( dcount_AlertUniqueId), Row = pack_array(row_num)\r\n| project Key, Value, Row\r\n| mvexpand  Key, Value, Row;\r\nunion  AlertStatusTable, AlertResolvePercent \r\n| order by toint(Row) asc",
                "size": 4,
                "exportDefaultValue": "0",
                "exportToExcelOptions": "visible",
                "timeContext": {
                    "durationMs": 0
                },
                "timeContextFromParameter": "TimeRange",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                    "{Workspaces}"
                ],
                "visualization": "tiles",
                "gridSettings": {
                    "rowLimit": 10,
                    "labelSettings": []
                },
                "tileSettings": {
                    "titleContent": {
                        "columnMatch": "Key",
                        "formatter": 1,
                        "formatOptions": {
                            "showIcon": true
                        }
                    },
                    "leftContent": {
                        "columnMatch": "Value",
                        "formatter": 12,
                        "formatOptions": {
                            "showIcon": true
                        },
                        "numberFormat": {
                            "unit": 17,
                            "options": {
                                "style": "decimal",
                                "maximumFractionDigits": 2,
                                "maximumSignificantDigits": 3
                            }
                        }
                    },
                    "showBorder": true
                }
            },
            "name": "AlertActivity",
            "styleSettings": {
                "padding": "0% 0% 0% 0%"
            }
        },
        {
            "type": 1,
            "content": {
                "json": "<div style=\"text-align:left\"><span data-ttu-id=\"853ef-116\"><span style=\"font-size:14px;font-weight:600;\">Êåâ BackupItem ÊòæÁ§∫ÁöÑÂ∑≤Ëß¶ÂèëË≠¶Êä•ÂíåÂ∑≤Ëß£ÂÜ≥Ë≠¶Êä•</span> </span><span class=\"sxs-lookup\"><span data-stu-id=\"853ef-116\"><span style=\"font-size:14px;font-weight:600;\">Fired and Resolved Alerts by BackupItem</span> </span></span></div>"
            },
            "name": "text - 18",
            "styleSettings": {
                "margin": "0% 0% 15px 0%"
            }
        },
        {
            "type": 11,
            "content": {
                "version": "LinkItem/1.0",
                "style": "nav",
                "links": [
                    {
                        "cellValue": "{\"01) BackupItem Name\": \"Name of the BackupItem\", \"02) BackupItem Type\": \"Type of item being backed up, in format BackupManagement Type/BackupItem Type\", \"03) # Alerts Created\": \"Number of Alerts fired for the given BackupItem in period\", \"04) # Alerts Resolved\": \"Number of Alerts resolved for the given BackupItem in period\", \"05) Avg Alert Resolution time (hrs)\": \"Average resolution time for alerts fired for the given BackupItem in period\"}",
                        "linkTarget": "CellDetails",
                        "linkLabel": "‚ìò",
                        "style": "link",
                        "linkIsContextBlade": true
                    }
                ]
            },
            "customWidth": "0",
            "name": "links - 17"
        },
        {
            "type": 9,
            "content": {
                "version": "KqlParameterItem/1.0",
                "query": "",
                "crossComponentResources": [
                    "{Workspaces}"
                ],
                "parameters": [
                    {
                        "id": "bfc9862a-9c20-4cb1-b0aa-57ad0276f9d3",
                        "version": "KqlParameterItem/1.0",
                        "name": "SearchByBackupItemNameWithContainerName",
                        "label": "Search BackupItem Name",
                        "type": 1,
                        "timeContext": {
                            "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange",
                        "value": ""
                    },
                    {
                        "id": "cf94af25-e5b0-425f-854d-7b29384345b7",
                        "version": "KqlParameterItem/1.0",
                        "name": "SortBy",
                        "label": "Sort By",
                        "type": 2,
                        "isRequired": true,
                        "value": "AlertsCreated",
                        "typeSettings": {
                            "additionalResourceOptions": []
                        },
                        "jsonData": "[\r\n    { \"value\":\"AlertsCreated\"},\r\n    { \"value\":\"AlertsResolved\"},\r\n    { \"value\":\"AvgAlertResolutionTimeInHrs\"}\r\n]",
                        "timeContext": {
                            "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange"
                    },
                    {
                        "id": "675c2cea-08bf-4c19-a43e-f4aa7c5b39e6",
                        "version": "KqlParameterItem/1.0",
                        "name": "Order",
                        "type": 2,
                        "isRequired": true,
                        "value": "Descending",
                        "typeSettings": {
                            "additionalResourceOptions": []
                        },
                        "jsonData": "[\r\n    { \"value\":\"Ascending\"},\r\n    { \"value\":\"Descending\"}\r\n]",
                        "timeContext": {
                            "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange"
                    },
                    {
                        "id": "a777e46d-fec1-4a42-a4a4-1bd30ec8b886",
                        "version": "KqlParameterItem/1.0",
                        "name": "PageNumber",
                        "label": "Page Number",
                        "type": 2,
                        "query": "// Time variable used\r\nlet Today = startofday(now());\r\n\r\n//**********************************************************************************************High-level Functions**********************************************************************************************\r\n\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= {TimeRange:start} and AlertOccurrenceDateTime <= {TimeRange:end};\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n\t | where AlertSeverity in ({AlertSeverity})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n| distinct *\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd\r\n);\r\n\r\nlet FinalAlertTable = ()\r\n{\r\n\tAlertTableWithAppliedFilter\t\r\n\t| where ContainerNameWithBackupItemName contains (@\"{SearchByBackupItemNameWithContainerName}\") or '*' in (@'{SearchByBackupItemNameWithContainerName}')\r\n\t| extend TimeToResolve = iif(AlertStatus == \"Resolved\", todouble(AlertTimeToResolveInMinutes)/60, 0.0)\r\n\t| extend BackupItemName = ContainerNameWithBackupItemName, BackupItemType = BMSTypeWithBackupItemType\r\n\t| summarize AlertsCreated = countif(AlertStatus == \"Active\"), AlertsResolved = countif( AlertStatus == \"Resolved\"), AvgAlertResolutionTimeInHrs = avgif(TimeToResolve, AlertStatus == \"Resolved\") by BackupItemName , BackupItemType\r\n\t| extend TempColumn = column_ifexists(tostring('{SortBy}'), \"AlertsCreated\")\r\n\t| extend ColumnToBeSorted = iff(tostring('{Order}') == \"Ascending\", 90000000 - TempColumn, TempColumn - 90000000)\r\n\t| sort by ColumnToBeSorted, BackupItemName asc nulls last\r\n\t| extend row_num = row_number()\r\n\t| extend page_num = tostring(((row_num-1)/10 + 1))\r\n    | distinct page_num\r\n}; \r\nFinalAlertTable\r\n\r\n\r\n",
                        "crossComponentResources": [
                            "{Workspaces}"
                        ],
                        "value": "1",
                        "typeSettings": {
                            "additionalResourceOptions": []
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                    }
                ],
                "style": "above",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "90",
            "name": "parameters - 12",
            "styleSettings": {
                "margin": "-23px 0% 15px 0%"
            }
        },
        {
            "type": 3,
            "content": {
                "version": "KqlItem/1.0",
                "query": "// Time variable used\r\nlet Today = startofday(now());\r\n\r\n//**********************************************************************************************High-level Functions**********************************************************************************************\r\n\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= {TimeRange:start} and AlertOccurrenceDateTime <= {TimeRange:end};\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n\t | where AlertSeverity in ({AlertSeverity})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n| distinct *\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd\r\n);\r\n\r\nlet FinalAlertTable = ()\r\n{\r\n\tAlertTableWithAppliedFilter\t\r\n\t| where ContainerNameWithBackupItemName contains (@\"{SearchByBackupItemNameWithContainerName}\") or '*' in (@'{SearchByBackupItemNameWithContainerName}')\r\n\t| extend TimeToResolve = iif(AlertStatus == \"Resolved\", todouble(AlertTimeToResolveInMinutes)/60, 0.0)\r\n\t| extend BackupItemName = ContainerNameWithBackupItemName, BackupItemType = BMSTypeWithBackupItemType\r\n\t| summarize AlertsCreated = countif(AlertStatus == \"Active\"), AlertsResolved = countif( AlertStatus == \"Resolved\"), AvgAlertResolutionTimeInHrs = avgif(TimeToResolve, AlertStatus == \"Resolved\") by BackupItemName , BackupItemType\r\n\t| extend TempColumn = column_ifexists(tostring('{SortBy}'), \"AlertsCreated\")\r\n\t| extend ColumnToBeSorted = iff(tostring('{Order}') == \"Ascending\", 90000000 - TempColumn, TempColumn - 90000000)\r\n\t| sort by ColumnToBeSorted, BackupItemName asc nulls last\r\n\t| extend row_num = row_number()\r\n\t| extend page_num = tostring(((row_num-1)/10 + 1))\r\n\t| where page_num has ('{PageNumber}') or '*' in ('{PageNumber}')\r\n\t| project BackupItemName, BackupItemType, AlertsCreated, AlertsResolved, AvgAlertResolutionTimeInHrs\r\n}; \r\nFinalAlertTable\r\n\r\n\r\n",
                "size": 0,
                "exportFieldName": "BackupItemName",
                "exportParameterName": "BackupItemName",
                "showExportToExcel": true,
                "exportToExcelOptions": "visible",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                    "{Workspaces}"
                ],
                "gridSettings": {
                    "formatters": [
                        {
                            "columnMatch": "BackupItemName",
                            "formatter": 16,
                            "formatOptions": {
                                "linkTarget": "Resource",
                                "showIcon": true
                            }
                        },
                        {
                            "columnMatch": "BackupItemType",
                            "formatter": 0,
                            "formatOptions": {
                                "showIcon": true
                            }
                        },
                        {
                            "columnMatch": "AlertsCreated",
                            "formatter": 18,
                            "formatOptions": {
                                "palette": "orange",
                                "linkTarget": "WorkbookTemplate",
                                "showIcon": true,
                                "thresholdsOptions": "colors",
                                "thresholdsGrid": [
                                    {
                                        "operator": "Default",
                                        "thresholdValue": null,
                                        "text": "{0}{1}"
                                    }
                                ],
                                "workbookContext": {
                                    "componentIdSource": "workbook",
                                    "resourceIdsSource": "workbook",
                                    "templateIdSource": "static",
                                    "templateId": "Community-Workbooks/Azure Backup/Alert Details",
                                    "typeSource": "default",
                                    "gallerySource": "static",
                                    "gallery": "Azure Monitor"
                                }
                            }
                        },
                        {
                            "columnMatch": "AlertsResolved",
                            "formatter": 18,
                            "formatOptions": {
                                "palette": "orange",
                                "showIcon": true,
                                "thresholdsOptions": "colors",
                                "thresholdsGrid": [
                                    {
                                        "operator": "Default",
                                        "thresholdValue": null,
                                        "text": "{0}{1}"
                                    }
                                ]
                            }
                        },
                        {
                            "columnMatch": "AvgAlertResolutionTimeInHrs",
                            "formatter": 18,
                            "formatOptions": {
                                "min": 0,
                                "palette": "orange",
                                "showIcon": true,
                                "thresholdsOptions": "colors",
                                "thresholdsGrid": [
                                    {
                                        "operator": "Default",
                                        "thresholdValue": null,
                                        "text": "{0}{1}"
                                    }
                                ]
                            },
                            "numberFormat": {
                                "unit": 0,
                                "options": {
                                    "style": "decimal",
                                    "minimumFractionDigits": 2,
                                    "maximumFractionDigits": 2
                                }
                            }
                        }
                    ],
                    "labelSettings": [
                        {
                            "columnId": "BackupItemName",
                            "label": "Backup Item Name"
                        },
                        {
                            "columnId": "BackupItemType",
                            "label": "Backup Item Type"
                        },
                        {
                            "columnId": "AlertsCreated",
                            "label": "# Alerts Created"
                        },
                        {
                            "columnId": "AlertsResolved",
                            "label": "# Alerts Resolved"
                        },
                        {
                            "columnId": "AvgAlertResolutionTimeInHrs",
                            "label": "Avg Alert Resolution Time (hrs)"
                        }
                    ]
                }
            },
            "showPin": true,
            "name": "query - 13",
            "styleSettings": {
                "margin": "-15px 0% 0% 0%",
                "showBorder": true
            }
        },
        {
            "type": 3,
            "content": {
                "version": "KqlItem/1.0",
                "query": "// Time variable used\r\nlet Today = startofday(now());\r\n\r\n//**********************************************************************************************High-level Functions**********************************************************************************************\r\n\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= {TimeRange:start} and AlertOccurrenceDateTime <= {TimeRange:end};\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n\t | where AlertSeverity in ({AlertSeverity})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n| distinct *\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd\r\n);\r\n\r\nlet FinalAlertTable = ()\r\n{\r\n\tAlertTableWithAppliedFilter\t\r\n    | summarize count(AlertSeverity) by AlertSeverity, bin(TimeRangeEnd, 2d)\r\n}; \r\nFinalAlertTable\r\n",
                "size": 0,
                "showExportToExcel": true,
                "exportToExcelOptions": "visible",
                "title": "Alerts by Severity over Time",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                    "{Workspaces}"
                ],
                "visualization": "barchart"
            },
            "customWidth": "50",
            "showPin": true,
            "name": "AlertCreatedVsResolvedWithTime"
        },
        {
            "type": 3,
            "content": {
                "version": "KqlItem/1.0",
                "query": "// Time variable used\r\nlet Today = startofday(now());\r\n\r\n//**********************************************************************************************High-level Functions**********************************************************************************************\r\n\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= {TimeRange:start} and TimeGenerated <= {TimeRange:end} \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= {TimeRange:start} and AlertOccurrenceDateTime <= {TimeRange:end};\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n\t | where AlertSeverity in ({AlertSeverity})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n| distinct *\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd\r\n);\r\n\r\nlet FinalAlertTable = ()\r\n{\r\n\tAlertTableWithAppliedFilter\t\r\n    | summarize count() by AlertType, AlertSeverity\r\n}; \r\nFinalAlertTable\r\n",
                "size": 0,
                "showExportToExcel": true,
                "exportToExcelOptions": "visible",
                "title": "Alerts  by Severity and AlertType",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "crossComponentResources": [
                    "{Workspaces}"
                ],
                "visualization": "barchart",
                "tileSettings": {
                    "showBorder": false,
                    "titleContent": {
                        "columnMatch": "AlertType_s",
                        "formatter": 1
                    },
                    "leftContent": {
                        "columnMatch": "count_",
                        "formatter": 12,
                        "formatOptions": {
                            "palette": "auto"
                        },
                        "numberFormat": {
                            "unit": 17,
                            "options": {
                                "maximumSignificantDigits": 3,
                                "maximumFractionDigits": 2
                            }
                        }
                    }
                }
            },
            "customWidth": "50",
            "showPin": true,
            "name": "AlertsBySeverityAndType"
        }
    ],
    "styleSettings": {},
    "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}